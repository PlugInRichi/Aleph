

========0===================== DOCKER FILE ===========================0=========
Los Dockerfile son los archivos que contienen las instrucciones que crean las
imagenes. Deben estar guardados dentro de un build context, es decir, un
directorio.

Dentro de este directorio crearemos un archivo llamado Dockerfile que contendrá
las especificaciones de nuestro contenedor:

RUM 	Indica la imagen base sobre la que se basa esta imagen
COPY 	Copia un archivo del build context y lo guarda en la imagen
RUN 	Ejecuta el comando indicado durante el proceso de creación de imagen.

docker build -t name_conteiner:name_version path_build_context

Ejecutar nuevamente posterior a la modificación de un volumen por directorio
provoca que se compile una nueva imagen con los cambios
docker build -t name_conteiner:name_version2 path_build_context

################################# VOLÚMENES ####################################
Cada que levantamos una nueva intancia de un contenedor, se crea un nuevo
sistema de archivos y cuando es eliminado este se pierde.

Si queremos almacenar datos (una web, una base de datos, etc.) dentro de un
contenedor necesitamos una manera de almacenarlos sin perderlos.

Docker ofrece tres maneras:

    A través de volúmenes, que son objetos de Docker como las imágenes y los contenedores.
    Montando un directorio de la máquina anfitrión dentro del contenedor.
    Almacenándolo en la memoria del sistema (aunque también se perderían al reiniciar el servidor).

Lo normal es usar volúmenes, pero habrá ocasiones en que es preferible montar
directamente un directorio de nuestro espacio de trabajo. Por ejemplo, para
guardar los datos de una base de datos usaremos volúmenes, pero para guardar el
código de una aplicación o de una página web montaremos el directorio.

La razón para esto último es que tanto nuestro entorno de desarrollo como el
contenedor tengan acceso a los archivos del código fuente. Los volúmenes, al
contrario que los directorios montados, no deben accederse desde la máquina
anfitrión.

=============== VOLUMENES OBJ_DOCKER ==================
docker volume create mis_datos
#Crea el volumen en la ruta /var/lib/docker/volumes/mis_datos

docker volume ls
#Listar volúmenes
docker volume inspect my-vol
#Ver propiedades del volumen

docker volume rm mis_datos
#Elimina el volumen mientras no haya sido asociado a un contenedor

docker volume prune
#Elimina volúmenes no utilizados

docker run -d -it --name ubu1 -v mis_datos:/var/lib/mysql ubuntu:17.10
# --name establece el identificador del contenedor

================ VOLUMENES DIRECTORIO =============0
docker run -d -it --name ubu2 -v /var/lib/mysql2:/var/lib/mysql ubuntu:17.10

docker run -d -it --name ubu2 -v "$(pwd)"/datos:/var/lib/mysql ubuntu:17.10

================= VOLUMENES TEMPORALES ============
docker run -d -it --name ubu3 --tmpfs /var/html/tempo ubuntu:17.10
# la carpeta /var/html/tempo será temporal

Este tipo de almacenamiento puede ser usado para almacenar ficheros de sesiones
web, temporales o contenido que nos interese que se borre en cada rearranque del
 contenedor.

============================== SUBIR IMAGENES =================================
Se pueden subir cualquier imágen en público, para hacerlas privadas hay que
pagar.

docker login
#Añade las credenciales para iniciar sesión (requiere crear cuenta)

docker tag image_id USER/imagen:tag
#Renombra el docker para poder compartirlo en el repositorio

docker push USER/imagen:tag
#Carga la imagen al repositorio

docker pull USER/imagen:tag 




Fuentes:
https://aulasoftwarelibre.github.io/taller-de-docker/data/
https://dockertips.com/volumenes
